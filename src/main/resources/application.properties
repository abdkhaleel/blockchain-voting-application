spring.application.name=blockchain-voting
# ===============================
# DATABASE CONFIGURATION
# ===============================
# The URL to connect to our PostgreSQL database running in Docker
spring.datasource.url=jdbc:postgresql://localhost:5432/voting_system
# The username we defined in docker-compose.yml
spring.datasource.username=khaleel
# The password we defined in docker-compose.yml
spring.datasource.password=abdulkhaleel@2004
spring.datasource.driver-class-name=org.postgresql.Driver

# ===============================
# JPA / HIBERNATE CONFIGURATION
# ===============================
# This tells Hibernate (the JPA provider) to automatically update the database schema
# based on our @Entity classes. 'update' is great for development.
# In production, you should use 'validate' and a migration tool like Flyway.
spring.jpa.hibernate.ddl-auto=update

# This prints the actual SQL queries to the console, which is very useful for debugging.
spring.jpa.show-sql=true

# Specifies the specific 'dialect' of SQL for PostgreSQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ===============================
# JWT CONFIGURATION
# ===============================
# A secret key for signing our JSON Web Tokens.
# IMPORTANT: Use a much longer, more random string and store it as an environment variable in production!
jwt.secret=a-very-long-and-secure-secret-key-that-is-at-least-256-bits-for-hs256
# Token expiration time in milliseconds (e.g., 86400000 = 24 hours)
jwt.expiration.ms=86400000